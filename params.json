{"body":"class-proxy\r\n===========\r\n\r\nA generic (ActiveRecord compatible) class proxy to setup proxy methods for your classes.\r\n\r\n## Using\r\n\r\nThe `ClassProxy` module just needs to be included in a class to get the capabilities\r\nprovided by this gem.\r\n\r\n### Example\r\n\r\n#### Basic example\r\n\r\n```ruby\r\nclass UserDb\r\n  include MongoMapper::Document\r\n  include ClassProxy\r\n\r\n  primary_fetch  { |args| where(args).first or (raise NotFound) }\r\n  fallback_fetch { |args| Octokit.user(args[:login]) }\r\n\r\n  key :name, String\r\n  key :login, String\r\nend\r\n```\r\n\r\n```ruby\r\n> user = UserDb.fetch(login: 'heelhook')\r\n=> #<UserDb _id: 779813, name: \"Pablo Fernandez\", login: \"heelhook\">\r\n```\r\n\r\nIn this example the database will be hit with a `where(login: 'heelhook')` and\r\nif it comes back empty `Octokit` will be used to retrieve the information requested.\r\n\r\nThe default action (overwritten with `after_fallback_fetch`, not used in this example)\r\nis to return a new object of the parent class (`UserDb`) with the proper keys set,\r\nin this example `:id`, `:name` and `:login`.\r\n\r\n#### Detailed example\r\n\r\n```ruby\r\nclass UserDb\r\n  include MongoMapper::Document\r\n  include ClassProxy\r\n\r\n  primary_fetch  { |args| where(args).first or (raise NotFound) }\r\n  fallback_fetch { |args| Octokit.user(args[:username]) }\r\n  after_fallback_fetch { |obj| self.username = obj.login }\r\n\r\n  key :name, String\r\n  key :reverse_name, String\r\n  key :username, String\r\n  key :public_repos, String\r\n  key :username_uppercase, String\r\n\r\n  # Use fallback_fetch since obj is requested\r\n  proxy_methods reverse_name: lambda { |obj| obj.name.reverse }\r\n\r\n  # No obj in the lambda, use the UserDb#username method here\r\n  proxy_methods username_uppercase: lambda { username.upcase }\r\nend\r\n```\r\n\r\nWith this class now the following can be done:\r\n\r\n```ruby\r\n> user = UserDb.fetch(username: 'heelhook')\r\n=> #<UserDb _id: 779813, name: \"Pablo Fernandez\", public_repos: \"25\", username: \"heelhook\">\r\n```\r\n\r\nSince `Octokit.user` returned an object which responded to `name` and our `UserDb` class\r\nhas a corresponding attribute, `:name` was set for us.\r\n\r\n```ruby\r\n> user.name\r\n=> \"Pablo Fernandez\"\r\n```\r\n\r\nYet `reverse_name` is not included, so when we call it, the `proxy_method` associated with it\r\nis used.\r\n\r\n```ruby\r\n> user.reverse_name\r\n=> \"zednanreF olbaP\"\r\n```\r\n\r\nSince that `proxy_method`'s `lambda` requested an `|obj|`, the method `fallback_fetch` was used\r\nand the object returned is used for `obj.name.reverse`\r\n\r\n#### Using `proxy_methods` without new `fallback_fetch` calls\r\n\r\nLet's see what's currently loaded.\r\n\r\n```ruby\r\n> user.no_proxy_username_uppercase\r\n=> nil\r\n```\r\n\r\nUsing the proxy. We already have the username in our object, so our `username_uppercase` proxy method will\r\njust use that (no `|obj|` is used).\r\n\r\n```ruby\r\n> user.username_uppercase\r\n=> \"HEELHOOK\"\r\n```\r\n\r\n#### Saving\r\n\r\nHere the `fallback_fetch` will not be used since the object has been persisted.\r\n\r\n```ruby\r\n> user.save\r\n=> true\r\n> user = UserDb.fetch(username: 'heelhook')\r\n=> #<UserDb _id: 779813, name: \"Pablo Fernandez\", public_repos: \"25\", username: \"heelhook\">\r\n```\r\n\r\nLike any\r\n\r\n## Compatibility\r\n\r\nClassProxy is tested against MRI 1.9.3.\r\n\r\n## Credits\r\n\r\nPablo Fernandez: heelhook at littleq . net\r\n\r\n## Contributing\r\n\r\nOnce you've made your great commits:\r\n\r\n1. Fork\r\n2. Create a topic branch - `git checkout -b my_branch`\r\n3. Push to your branch - `git push origin my_branch`\r\n4. Create a [Pull Request](https://help.github.com/pull-requests/) from your branch\r\n5. That's it!\r\n\r\n## License\r\n\r\nCopyright (c) 2012 Pablo Fernandez\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","name":"Class-proxy","tagline":"A generic (ActiveRecord compatible) class proxy to setup proxy methods for your classes","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}